/******************************************************************************
* This file is AUTO-GENERATED by CodeGenerator.
* DONNOT modify it by hands UNLESS you know what you are doing.
*
* To aquire for source codes of the Generator or for any help,
* please mail to [ahda86@gmail.com].
*
* Bug Reports & Improvement Suggestions are Appreciated.
******************************************************************************/


#ifndef __MHZ_EVENT_HANDLER_MHZ_H__
#define __MHZ_EVENT_HANDLER_MHZ_H__

#include "framework/websocket/websocketcontext.h"
#include "framework/json/value.h"
#include "Core/EventCommon.h"

namespace cg
{
    class CLogin_callback
        : public virtual cdf::CRefShared
    {
    public:
        CLogin_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(const std::string & sessionKey, const std::string & nickname, int userId);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CLogin_callback> CLogin_callbackPtr;

    class CSignup_callback
        : public virtual cdf::CRefShared
    {
    public:
        CSignup_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(const std::string & sessionKey, int userId);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CSignup_callback> CSignup_callbackPtr;

    class CReconnect_callback
        : public virtual cdf::CRefShared
    {
    public:
        CReconnect_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(int res);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CReconnect_callback> CReconnect_callbackPtr;

    class CStartPost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CStartPost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response();
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CStartPost_callback> CStartPost_callbackPtr;

    class CEndPost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CEndPost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(int postId);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CEndPost_callback> CEndPost_callbackPtr;

    class CDeletePost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CDeletePost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response();
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CDeletePost_callback> CDeletePost_callbackPtr;

    class CGetPostList_callback
        : public virtual cdf::CRefShared
    {
    public:
        CGetPostList_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(const Json::Value & res);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CGetPostList_callback> CGetPostList_callbackPtr;

    class CViewPost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CViewPost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(const Json::Value & res);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CViewPost_callback> CViewPost_callbackPtr;

    class CCommentPost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CCommentPost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response();
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CCommentPost_callback> CCommentPost_callbackPtr;

    class CLikePost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CLikePost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response();
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CLikePost_callback> CLikePost_callbackPtr;

    class CDislikePost_callback
        : public virtual cdf::CRefShared
    {
    public:
        CDislikePost_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response();
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CDislikePost_callback> CDislikePost_callbackPtr;

    class CTest_callback
        : public virtual cdf::CRefShared
    {
    public:
        CTest_callback(int msgId, const std::string & event, const cdf::CWSContextPtr & context);
        void response(const cdf::CDateTime & testOut);
        const cdf::CWSContextPtr getContext(){ return _context; }

    private:
        int _msgId;
        std::string _event;
        cdf::CWSContextPtr _context;
    };
    typedef cdf::CHandle<CTest_callback> CTest_callbackPtr;


    //EventHandler
    class CEventHandler
        : public virtual cdf::CRefShared
    {
    public:
        static void onError(int errorCode, const std::string & errorMsg, int msgId, const cdf::CWSContextPtr & context);

        virtual void onUploadImg(const std::string & img, const cdf::CWSContextPtr & context) = 0;

        virtual void login(const std::string & account, const std::string & passwd, const std::string & deviceId, const ::cg::CLogin_callbackPtr & callback) = 0;
        virtual void signup(const std::string & account, const std::string & nickname, const std::string & passwd, const std::string & deviceId, const ::cg::CSignup_callbackPtr & callback) = 0;
        virtual void reconnect(const std::string & account, const std::string & sessionKey, const ::cg::CReconnect_callbackPtr & callback) = 0;
        virtual void startPost(const std::string & title, const std::string & content, const Json::Value & imgNames, const ::cg::CStartPost_callbackPtr & callback) = 0;
        virtual void endPost(const ::cg::CEndPost_callbackPtr & callback) = 0;
        virtual void deletePost(int postId, const ::cg::CDeletePost_callbackPtr & callback) = 0;
        virtual void getPostList(int userId, int lastPostId, bool forNewPost, const ::cg::CGetPostList_callbackPtr & callback) = 0;
        virtual void viewPost(int postId, const ::cg::CViewPost_callbackPtr & callback) = 0;
        virtual void commentPost(int postId, const std::string & comment, const ::cg::CCommentPost_callbackPtr & callback) = 0;
        virtual void likePost(int postId, const ::cg::CLikePost_callbackPtr & callback) = 0;
        virtual void dislikePost(int postId, const ::cg::CDislikePost_callbackPtr & callback) = 0;
        virtual void test(const cdf::CDateTime & testIn, const ::cg::CTest_callbackPtr & callback) = 0;
    };
    typedef cdf::CHandle<CEventHandler> CEventHandlerPtr;
} //close namespace cg

#endif //__MHZ_EVENT_HANDLER_MHZ_H__
